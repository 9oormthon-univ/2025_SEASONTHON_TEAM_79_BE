name: CICD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  JAVA_VERSION: '24'
  APP_IMAGE: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/live_server
  HEALTH_ENDPOINT: env
  BLUE_PORT: '8080'
  GREEN_PORT: '8081'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Write application-secret.yml from Base64 secret
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_SECRET }}" | base64 -d > src/main/resources/application-secret.yml
          test -s src/main/resources/application-secret.yml

      - name: Setup Gradle (cache)
        uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.APP_IMAGE }}:${{ github.sha }}
            ${{ env.APP_IMAGE }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Determine current upstream (blue/green) via Nginx (port 80)
        id: pick
        run: |
          set -e
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://${{ secrets.LIVE_SERVER_IP }}/${{ env.HEALTH_ENDPOINT }}")
          if [ "$STATUS" = "200" ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/${{ env.HEALTH_ENDPOINT }}")
          else
            CURRENT_UPSTREAM=green
          fi
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=${{ env.BLUE_PORT }}"   >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green"               >> $GITHUB_ENV
            echo "TARGET_PORT=${{ env.GREEN_PORT }}"   >> $GITHUB_ENV
          elif [ "$CURRENT_UPSTREAM" = "green" ]; then
            echo "CURRENT_PORT=${{ env.GREEN_PORT }}"  >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue"                >> $GITHUB_ENV
            echo "TARGET_PORT=${{ env.BLUE_PORT }}"    >> $GITHUB_ENV
          else
            echo "Unknown upstream: $CURRENT_UPSTREAM"
            exit 1
          fi
          echo "::notice::Will deploy to $TARGET_UPSTREAM on port $TARGET_PORT"

      - name: Deploy target stack via SSH (docker compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIVE_SERVER_IP }}
          username: ec2-user          # Ubuntu 인스턴스면 ubuntu 로 바꾸세요.
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            docker pull "${{ env.APP_IMAGE }}:latest"
            # 대상 색상의 compose 파일로 기동(이미 떠있어도 최신 이미지로 교체)
            docker compose -f "docker-compose-${{ env.TARGET_UPSTREAM }}.yml" up -d
            docker image prune -f

      - name: Health check new color directly (bypass Nginx)
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{ env.TARGET_PORT }}/${{ env.HEALTH_ENDPOINT }}
          max-attempts: 10
          retry-delay: 6s

      - name: Point Nginx to new upstream and reload
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIVE_SERVER_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            docker exec -i nginxserver bash -lc 'echo "set \\$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -t && nginx -s reload'

      - name: Stop previous color
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIVE_SERVER_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            docker stop "${{ env.CURRENT_UPSTREAM }}" || true
            docker rm   "${{ env.CURRENT_UPSTREAM }}" || true
